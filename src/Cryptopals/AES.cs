using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Cryptopals
{
    // ReSharper disable once InconsistentNaming
    /// <summary>
    /// Abandoned attempt (2019) of a custom implementation of AES.
    /// I made some progress, but abandoning in favor of out-of-the-box implementation and to move forward with the rest of the callenges.
    /// </summary>
    public class AES
    {
        public string Encrypt(string plaintext, string key)
        {
            // 1. Key Expansion (derive round keys from cipher key using Rijndael's key schedule) <- done per round

            // data into blocks
            var plaintextBytes = Encoding.ASCII.GetBytes(plaintext);

            var dataBytes = new List<byte[]>();

            for (var i = 0; i < plaintextBytes.Length; i += 16)
            {
                var bytes = new byte[16];
                Buffer.BlockCopy(plaintextBytes, i, bytes, 0, 16);
                dataBytes.Add(bytes);
            }

            var keyBytes = Encoding.ASCII.GetBytes(key);
            var round = 0;

            // 2. AddRoundKey: "XORs a round key to the internal state"
            round = 1;
            for (var i = 0; i < dataBytes.Count; i++)
            {
                dataBytes[i] = Xor.ByteArrays(dataBytes[i], keyBytes);
            }

            keyBytes = GetRoundKey(keyBytes, round);
            
            // 3. REPEAT Rounds - ECB => for each block
            for (int i = 0; i < 9; i++)
            {
                for (int j = 0; j < dataBytes.Count; j++)
                {
                    // 1. SubBytes: "Replaces each bytes with another byte according to an S-box" - Substitution
                    // "confusion to obscure the relationship of each byte"
                    dataBytes[j] = SubstituteBytes(dataBytes[j]);

                    // 2. ShiftRows: "Shifts the i-th row of i positions, for i ranging from 0 to 3" - Permutation
                    //dataBytes[j] = 

                    // 3. MixColumns: "Applies the same linear transformation to each of the 4 columns of the state"  - Permutation

                    // 4. AddRoundKey   
                }
            }



            // 4. Final round


            // 1. SubBytes
            // 2. ShiftRows
            // 3. AddRoundKey

            throw new NotImplementedException();
        }

        public string Decrypt(string ciphertext)
        {


            throw new NotImplementedException();
        }

        public byte[] GetRoundKey(byte[] key, int round) // using Rijndael key schedule
        {
            // take last column of the key and move top byte to bottom
            var row1 = key[12];
            var row2 = key[13];
            var row3 = key[14];
            var row4 = key[15];

            var column = new byte[4];
            column[0] = row2;
            column[1] = row3;
            column[2] = row4;
            column[3] = row1;

            // run each byte of last column through substitution box
            column = SubstituteBytes(column);

            // xor with a round constant (different for each round)
            column[0] = (byte)(column[0] ^ roundConstants[round, 0]);
            column[1] = (byte)(column[1] ^ roundConstants[round, 1]);
            column[2] = (byte)(column[2] ^ roundConstants[round, 2]);
            column[3] = (byte)(column[3] ^ roundConstants[round, 3]);

            var roundKey = key.ToArray();

            // xor using first column
            roundKey[0] = (byte)(key[0] ^ column[0]);
            roundKey[1] = (byte)(key[1] ^ column[1]);
            roundKey[2] = (byte)(key[2] ^ column[2]);
            roundKey[3] = (byte)(key[3] ^ column[3]);

            // xor rest of the columns using the previous column
            roundKey[4] = (byte)(key[4] ^ roundKey[0]);
            roundKey[5] = (byte)(key[5] ^ roundKey[1]);
            roundKey[6] = (byte)(key[6] ^ roundKey[2]);
            roundKey[7] = (byte)(key[7] ^ roundKey[3]);

            roundKey[8] = (byte)(key[8] ^ roundKey[4]);
            roundKey[9] = (byte)(key[9] ^ roundKey[5]);
            roundKey[10] = (byte)(key[10] ^ roundKey[6]);
            roundKey[11] = (byte)(key[11] ^ roundKey[7]);

            roundKey[12] = (byte)(key[12] ^ roundKey[8]);
            roundKey[13] = (byte)(key[13] ^ roundKey[9]);
            roundKey[14] = (byte)(key[14] ^ roundKey[10]);
            roundKey[15] = (byte)(key[15] ^ roundKey[11]);

            return roundKey;
        }

        private byte[] SubstituteBytes(byte[] bytes)
        {
            byte[] result = new byte[4];
            result[0] = substitutionBox[bytes[0] >> 4, bytes[0] & 0x0f];
            result[1] = substitutionBox[bytes[1] >> 4, bytes[1] & 0x0f];
            result[2] = substitutionBox[bytes[2] >> 4, bytes[2] & 0x0f];
            result[3] = substitutionBox[bytes[3] >> 4, bytes[3] & 0x0f];
            return result;
        }

        private readonly byte[,] roundConstants =
        {
            {0x00, 0x00, 0x00, 0x00}, // unused?
            {0x01, 0x00, 0x00, 0x00},
            {0x02, 0x00, 0x00, 0x00},
            {0x04, 0x00, 0x00, 0x00},
            {0x08, 0x00, 0x00, 0x00},
            {0x10, 0x00, 0x00, 0x00},
            {0x20, 0x00, 0x00, 0x00},
            {0x40, 0x00, 0x00, 0x00},
            {0x80, 0x00, 0x00, 0x00},
            {0x1b, 0x00, 0x00, 0x00},
            {0x36, 0x00, 0x00, 0x00}
        };

        private readonly byte[,] substitutionBox =
        {
            /* 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f */
            /*0*/ {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
            /*1*/ {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
            /*2*/ {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
            /*3*/ {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
            /*4*/ {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
            /*5*/ {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
            /*6*/ {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
            /*7*/ {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
            /*8*/ {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
            /*9*/ {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
            /*a*/ {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
            /*b*/ {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
            /*c*/ {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
            /*d*/ {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
            /*e*/ {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
            /*f*/ {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}
        };

        private readonly byte[,] inverseSBox =
        {
            /* 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f */
            /*0*/ {0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb},
            /*1*/ {0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb},
            /*2*/ {0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e},
            /*3*/ {0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25},
            /*4*/ {0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92},
            /*5*/ {0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84},
            /*6*/ {0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06},
            /*7*/ {0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b},
            /*8*/ {0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73},
            /*9*/ {0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e},
            /*a*/ {0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b},
            /*b*/ {0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4},
            /*c*/ {0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f},
            /*d*/ {0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef},
            /*e*/ {0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61},
            /*f*/ {0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}
        };
    }
}